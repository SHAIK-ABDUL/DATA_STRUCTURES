#include<stdio.h>
#include<stdlib.h>
struct node
{
	int data;
	struct node*next;
	int time;
};

typedef struct node node;
node *getnode(int);
void display(node **,int);
int ismem(int*,int *,int);
void undirectededge(node **,int,int);
void dfs(node**,int *,int,int,int,int *,int*);

int main()
{
	int data,data1,n,i;
	printf("Enter the number of nodes:");
	scanf("%d",&n);
	node *a[n];
	int b[n],j=0,k=0;
	for(i=0;i<n;i++)
	{
		printf("Enter the data:");
		scanf("%d",&data);
		a[i]=(node*)malloc(sizeof(node));
		a[i]->data=data;
		a[i]->next=NULL;
		a[i]->time=0;
	}
	printf("1->create link(UNDIRECTED)\n2->discard\nEnter:");
	scanf("%d",&i);
	while(i==1)
	{
		printf("Enter the starting vertex:");
		scanf("%d",&data);
		printf("Enter the ending vertex:");
		scanf("%d",&data1);
		undirectededge(a,data,data1);
		printf("1->create link\n2->discard\nEnter:");
		scanf("%d",&i);
	}
	printf("Displaying(Adjecancy list)\n");
	display(a,n);
	printf("\nDisplaying(data)\n");
	dfs(a,b,a[0]->data,-123,n,&j,&k);
	printf("\n");
}

void dfs(node**a,int *b,int data,int parent,int n,int *j,int*k)
{
	//printf("%d ",data);
	b[*j]=data;
	(*j)++;
	(*k)++;
	int i;
	node *temp=NULL,*temp1=NULL,*par=NULL;
	for(i=0;i<n;i++)
	{
		if(parent==-123)
		{
			if(a[i]->data==data)
			{
				temp=a[i];
				break;
			}
		}
		else
		{
			if(a[i]->data==data) temp=a[i];
			else if(a[i]->data==parent) par=a[i];
			if(temp!=NULL && par!=NULL) break;
		}
	}
	//printf("che:%d %d \n",data,parent);
	temp->time=(*k);
	temp1=temp;
	temp=temp->next;
	while(1)
	{
		if(temp!=NULL && (1!=ismem(b,j,temp->data))) dfs(a,b,temp->data,data,n,j,k);
		else if(temp!=NULL);
		else
		{
			if(parent==-123)
			{
				(*k)++;
				temp1->time=(*k);
			}
			else
			{
				int min=999;
				temp=temp1->next;
				while(temp!=NULL)
				{
					if(temp->data==parent);
					else
					{
						for(i=0;i<n;i++)
						{
							if(a[i]->data==temp->data)
							{
								if(min > a[i]->time) min=a[i]->time;
								break;
							}
						}
					}
					temp=temp->next;
				}
				if(min==999)
				{
					(*k)++;
					temp1->time=(*k);
				}
				else
				{
					temp1->time=min;
				}
				if(temp1->time >=par->time )
				{
					printf("BRIDGES:%d(%d) %d(%d)\n",temp1->data,temp1->time,par->data,par->time);
				}
			}
			break;
		}
		temp=temp->next;
	}
}

int ismem(int*b,int *j,int data)
{
	int i;
	for(i=0;i<(*j);i++)
	{
		if(b[i]==data) return 1;
	}
	return 0;
}

node *getnode(int data)
{
	node*newnode;
	newnode=(node*)malloc(sizeof(node));
	newnode->data=data;
	newnode->next=NULL;
	return newnode;
}

void undirectededge(node **a,int sv,int ev)
{
	node *temp1=NULL,*temp2=NULL;
	int i;
	for(i=0;temp1==NULL || temp2==NULL;i++)
	{
		if((a[i]->data)==sv) temp1=a[i];
		else if((a[i]->data)==ev) temp2=a[i];
	}
	while(temp1->next!=NULL) temp1=temp1->next;
	temp1->next=getnode(ev);
	while(temp2->next!=NULL) temp2=temp2->next;
	temp2->next=getnode(sv);
}


void display(node **a,int n)
{
	int i;
	node *temp=NULL;
	for(i=0;i<n;i++)
	{	
		printf("\n");
		temp=a[i];
		while(temp!=NULL)
		{
			printf("%d ",temp->data);
			temp=temp->next;
		}
	}
	printf("\n");	
}
